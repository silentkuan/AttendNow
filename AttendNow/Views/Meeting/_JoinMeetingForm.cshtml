


@model AttendNow.Models.SP_GetMeetings_Result
<hr />
@if (Model.condition == "S")
{
<div class="form-group alert alert-danger">
    Cannot Join ! @(Model.meeting_type == "M" ? "Meeting / Discussion" : Model.meeting_type == "E" ? "Event" : "Training") has been started.
</div>
}
else if (Model.condition == "E")
{


<div class="form-group alert alert-danger">
    Cannot Join ! @(Model.meeting_type == "M" ? "Meeting / Discussion" : Model.meeting_type == "E" ? "Event" : "Training") has expired.
</div>
}
else if (Model.status == "V")
{
<div class="form-group alert alert-danger">
    Cannot Join ! @(Model.meeting_type == "M" ? "Meeting / Discussion" : Model.meeting_type == "E" ? "Event" : "Training") is not existing.
</div>
}
<h3>

    <b>@(Model.meeting_type == "M" ? "Meeting / Discussion" : Model.meeting_type == "E" ? "Event" : "Training") Title:</b> @Model.title

</h3>
<hr />

<div class="row pb-3">

    <div class="col-lg-6">
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>Activity Code : </b> </div>
            <div class="col-sm-8 text-sm-left">@Model.meeting_code </div>
        </div>
        @*<div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>Timezone : </b> </div>
            <div class="col-sm-8 text-sm-left">
                <select id="timezone" class="form-control" onchange="changeTimezone('@Model.startDate','@Model.endDate')" onselect="changeTimezone('@Model.startDate','@Model.endDate')">

                    <option value="M" @(Model.meeting_timezone == "M" ? "selected" : "")> Malaysia / Singapore / China </option>
                    <option value="V" @(Model.meeting_timezone == "V" ? "selected" : "")> Vietnam / Cambodia </option>
                    <option value="J" @(Model.meeting_timezone == "J" ? "selected" : "")> Jordan </option>
                </select>
                <span class="text-warning noprint">*Choose timezone for local time.</span>
            </div>
        </div>
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>Start Time : </b> </div>
            <div class="col-sm-8 text-sm-left" id="startTime">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", Model.startDate) </div>
        </div>
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>End Time : </b> </div>
            <div class="col-sm-8 text-sm-left" id="endTime">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", Model.endDate) </div>
        </div>*@
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>Timezone : </b> </div>
            <div class="col-sm-8 text-sm-left">
                @(Model.meeting_timezone == "M" ? "Malaysia / Singapore / China" : Model.meeting_timezone == "V" ? "Vietnam / Cambodia" : Model.meeting_timezone == "J" ? "Jordan":"")

            </div>
        </div>
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>Start Time : </b> </div>
            <div class="col-sm-8 text-sm-left" id="startTimeMeeting">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", Model.startDate) </div>
        </div>
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>End Time : </b> </div>
            <div class="col-sm-8 text-sm-left" id="endTimeMeeting">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", Model.endDate) </div>
        </div>
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"><b>Presenter :</b> </div>
            <div class="col-sm-8 text-sm-left">@Model.organizer (@Model.DepartmentName Department, @Model.LocationName)</div>
        </div>


        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right"> <b>Venue :</b></div>
            <div class="col-sm-8 text-sm-left">

                @if (Model.place != null && !string.IsNullOrEmpty(Model.place) && Model.link != null && !string.IsNullOrEmpty(Model.link))
                {
                    <span>
                        @Model.placeName <br /><small>OR</small><br /> Online
                    </span>
                }
                else if (Model.link != null && !string.IsNullOrEmpty(Model.link))
                {
                    <span>Online</span>
                }
                else if (Model.place != null && !string.IsNullOrEmpty(Model.place))
                {
                    <span>
                        @Model.placeName
                    </span>
                }

            </div>
        </div>


    </div>
    <div class="col-lg-6" id="cluster_info">
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right">
                <dt>Type :</dt>
            </div>
            <div class="col-sm-8 text-sm-left">
                @(Model.meeting_type == "M" ? "Meeting / Discussion" : Model.meeting_type == "E" ? "Event" : "Training")
            </div>
        </div>
        <div class="row mb-0 p-1">
            <div class="col-sm-4 text-sm-right">
                <dt>Privacy Option :</dt>
            </div>
            <div class="col-sm-8 text-sm-left">
                @(Model.type.HasValue && Model.type == true ? "Private" : "Public")
            </div>
        </div>
        <div class="border ml-5 mt-3 p-2 noprint">
            <b>Timezone Checking:</b>
            <hr class="mt-2" />
            <div class="row mb-0 p-1">
                <div class="col-sm-4 text-sm-right"><b>Timezone : </b> </div>
                <div class="col-sm-8 text-sm-left">
                    <select id="timezone" class="form-control" onchange="changeTimezone('@Model.startDate','@Model.endDate')" onselect="changeTimezone('@Model.startDate','@Model.endDate')">

                        <option value="M" @(Model.meeting_timezone == "M" ? "selected" : "")> Malaysia / Singapore / China </option>
                        <option value="V" @(Model.meeting_timezone == "V" ? "selected" : "")> Vietnam / Cambodia </option>
                        <option value="J" @(Model.meeting_timezone == "J" ? "selected" : "")> Jordan </option>
                    </select>
                    <span class="text-warning noprint">*Choose timezone for local time.</span>
                </div>
            </div>
            <div class="row mb-0 p-1">
                <div class="col-sm-4 text-sm-right"><b>Start Time : </b> </div>
                <div class="col-sm-8 text-sm-left" id="startTime">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", Model.startDate) </div>
            </div>
            <div class="row mb-0 p-1">
                <div class="col-sm-4 text-sm-right"><b>End Time : </b> </div>
                <div class="col-sm-8 text-sm-left" id="endTime">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", Model.endDate) </div>
            </div>
        </div>




    </div>
</div>
<hr />
<div class="container mt-4" id="registerForm">
    <h2 class="d-flex justify-content-between align-items-center">
        <b>Fill in your information to join the @(Model.meeting_type == "M" ? "Meeting / Discussion" : Model.meeting_type == "E" ? "Event" : "Training")</b>
        <button class="btn btn-primary btn-sm" onclick="goRapidlyRegister()">Rapidly Register</button>
    </h2>
</div>
<hr />
@using (Html.BeginForm("", "", FormMethod.Post))
{

    <input type="hidden" class="form-control" id="meeting_code" value="@Model.meeting_code" />
    <div class="form-group  row">
        <label class="col-sm-2 col-form-label">Staff No <span class="text-danger">*</span></label>
        <div class="col-sm-10">

            <input type="text" class="form-control" id="staff_no" />
            <span id="staff_no_error" class="text-danger"></span>

        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Name <span class="text-danger">*</span></label>
        <div class="col-sm-10">
            <input type="text" class="form-control" id="name" />
            <span id="name_error" class="text-danger"></span>

        </div>
    </div>

    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Email</label>
        <div class="col-sm-10">
            <input type="email" class="form-control" id="email" />
            <span id="email_error" class="text-danger"></span>

        </div>
    </div>

    <div class="hr-line-dashed"></div>
    
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Department <span class="text-danger">*</span></label>
        <div class="col-sm-10">
            @if (ViewBag.Title == "View Participant")
            {
                <label class="col-form-label">@Model.DepartmentName (@Model.department.ToUpper())</label>
            }
            else
            {
                @Html.DropDownList("participant_department", ViewBag.department_code as SelectList, "Select Department", htmlAttributes: new { @class = "form-control" })
                <span id="participant_department_error" class="text-danger"></span>
            }

        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Factory <span class="text-danger">*</span></label>
        <div class="col-sm-10">
            @if (ViewBag.Title == "View User")
            {
                <label class="col-form-label">@Model.factoryName (@Model.factory.ToUpper())</label>
               
            }
            else
            {
                @Html.DropDownList("participant_factory", ViewBag.factory_id as SelectList, "Select Factory",
               htmlAttributes: new
               {
                   @class = "form-control",

                   onChange = "getLocation(this,'fillInfo')"
               })
                <span id="participant_factory_error" class="text-danger"></span>
            }

        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Location <span class="text-danger">*</span></label>
        <div class="col-sm-10">
            @if (ViewBag.Title == "View Participant")
            {
                <label class="col-form-label">@Model.LocationName (@Model.location.ToUpper())</label>
            }
            else
            {
                @Html.DropDownList("participant_location", ViewBag.location_code as SelectList, "Select Location", htmlAttributes: new { @class = "form-control" })
                <span id="participant_location_error" class="text-danger"></span>
            }

        </div>
    </div>
    <div class="form-group row">
        <label class="col-sm-2 col-form-label">Remark</label>
        <div class="col-sm-10">

            <textarea id="remark" class="summernote form-control"></textarea>
        </div>
    </div>


}
<section class="progress-demo">
    <button class="ladda-button btn btn-block btn-primary" data-style="zoom-in" onclick="funcAddorEdit('Create')">Register</button>
</section>


@Scripts.Render("~/plugins/ladda")
@Styles.Render("~/plugins/laddaStyles")
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")
@Scripts.Render("~/main")

<script>
    $(document).ready(function () {
        $('.summernote').summernote();
            Ladda.bind('.progress-demo .ladda-button', {
                callback: function (instance) {

                    var interval = setInterval(function () {

                        if (returnMessage != "") {
                            instance.stop();
                            clearInterval(interval);
                            returnMessage = "";
                        }
                    }, 200);
                }
            });
    });

    function goRapidlyRegister() {
       
        $('#rapidly-register-model').modal('show');
    }
    function funcAddorEdit(action) {

        var isValid = true; // Flag to check overall form validity

        if (!validateField("staff_no", "Staff No field is required.")) {
            isValid = false;
        }

        if (!validateField("name", "Name field is required.")) {
            isValid = false;
        }
        if (!validateField("email", "Email field is required.")) {
            isValid = false;
        } else {
            if (!validateEmail("email", "Invalid Email Format.")) {
                isValid = false;
            }
        }

        if (!validateDropdown("participant_department", "Select Department")) {
            isValid = false;
        }


        if (!validateDropdown("participant_location", "Select Location")) {
            isValid = false;
        }
        if (!validateDropdown("participant_factory", "Select Factory")) {
            isValid = false;
        }

        // Add more validation for other fields as needed
        if ($("#staff_no").val().includes("admin") || $("#name").val().includes("admin") || $("#staff_no").val().includes("administrator")
            || $("#name").val().includes("administrator")) {
            errorMessage("You are not allow to use 'admin' or 'administrator' as your name or staff no !");
            returnMessage = "You are not allow to use 'admin' or 'administrator' as your name or staff no !";
            return;
        }
        if (!isValid) {
            errorMessage("Please make sure all required fields is filled");
            returnMessage = "Please make sure all required fields is filled";
            return;
        }

        var userData = {
            staff_no: $("#staff_no").val(),
            name: $("#name").val(),
            email: $("#email").val(),
            mobile: $("#mobile").val(),
            department: $("#participant_department").val(),
            location: $("#participant_location").val(),
            factory_id: $("#participant_factory").val(),
            meeting: $("#meeting_code").val(),
            remark: $("#remark").val(),

        };

        // Serialize the object into a JSON string
        var jsonData = JSON.stringify(userData);

        // Make an AJAX request
        $.ajax({
            type: "POST",
            url: "/Participant/"+action, // Replace with the actual URL
            data: jsonData,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: function (data) {
                if (data.success) {

                    window.location.href = '@Url.Action("MeetingHistory", "Participant", new { id = "" })' + "/" + data.id;

                } else {
                    errorMessage(data.error_message);
                    returnMessage = data.error_message;
                    if (data.idError) {
                        $("#staff_no").parent().addClass("has-error");
                        $("#participant_factory").parent().addClass("has-error");
                    } else {
                        $("#staff_no").parent().removeClass("has-error");
                        $("#participant_factory").parent().removeClass("has-error");
                    }
                }
            },
            error: function (data) {
                errorMessage(data.error_message);
                returnMessage = data.error_message;
            }
        });
    }
    function getLocation(factory,type) {
        
        $.ajax({
            type: 'POST',
            url: '/Participant/GetLocation', // Replace with your controller and action
            data: { factory_id: factory.value }, // Send the department ID to add to the database
            success: function (data) {
                if (data.success) {
                    var locationDropDown;
                    @* successMessage(data.message);*@
                    if (data.activeLocation) {

                        if (type == "fillInfo") {
                            locationDropDown = $('#participant_location');

                        } else {
                            locationDropDown = $('#participant_location_register');
                        }
                        locationDropDown.empty();
                        var defaultOption = $('<option>', {
                            value: 'null',
                            text: 'Select an option',
                            disabled: true,
                            selected: true
                        });

                        locationDropDown.append(defaultOption);


                        data.activeLocation.forEach(function (location) {
                            // Create a new option element
                            var newLocation = $('<option>', {
                                value: location.location_code,
                                text: location.factory + "-" + location.name
                            });

                            // Append the new option to the select element
                            locationDropDown.append(newLocation);
                        });

                    }
                    // Department added successfully to the database
                } else {
                    errorMessage(data.error_message);

                }





            },
            error: function (data) {
                errorMessage(data.error_message);

            }
        });
    }
</script>
