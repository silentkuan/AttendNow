@using AttendNow.Models
@{ ViewBag.Title = "Calendar";
    var meetingAccess = ViewBag.meetingAccess as sys_setting_role_permission; }

<div class="modal fade" id="updateMeeting" tabindex="-1" role="dialog" aria-labelledby="confirmationModalLabel" aria-hidden="true" >
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmationModalLabel">Confirmation</h5>
                <button type="button" class="close btnCancel" data-dismiss="modal" aria-label="Close" >
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to modify the information? All the Participants will be notified via email.
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary btnCancel" data-dismiss="modal" id="cancelBtn">Cancel</button>
                <button class="btn btn-primary" data-style="zoom-in" id="confirmBtnNotEmail">Yes (No Send Email)</button>
                <section class="progress-demo ">
                    <button class="btn ladda-button btn-primary" data-style="zoom-in" id="confirmBtn">Yes</button>
                </section>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="calendar-model" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="confirmationModalLabel">Details</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <div class="col-md-12">
                    <div class="form-group">

                        <div class="form-group row" id="modal-meeting-code">
                            <label for="startDate" class="col-sm-3 col-form-label">Meeting Code:</label>
                            <div class="col-sm-9">
                                <label id="meeting_code" class="mt-2"></label>

                            </div>
                        </div>
                        <div class="form-group row" id="modal-title">
                            <label for="startDate" class="col-sm-3 col-form-label">Meeting Title:</label>
                            <div class="col-sm-9">
                                <label id="title" class="mt-2"></label>

                            </div>
                        </div>

                        <div class="form-group row" id="modal-place">
                            <label for="place" class="col-sm-3 col-form-label">Venue:</label>
                            <div class="col-sm-9">
                                <label id="place" class="mt-2"></label>

                            </div>
                        </div>
                        <div class="form-group row" id="modal-startData">
                            <label for="startDate" class="col-sm-3 col-form-label">Start Date:</label>
                            <div class="col-sm-9">
                                <label id="startDate" class="mt-2"></label>

                            </div>
                        </div>

                        <div class="form-group row" id="modal-endData">
                            <label for="endDate" class="col-sm-3 col-form-label">End Date:</label>
                            <div class="col-sm-9">
                                <label id="endDate" class="mt-2"></label>

                            </div>
                        </div>


                        <div class="form-group row" id="modal-detail">
                            <label for="startDate" class="col-sm-3 col-form-label">Detail:</label>
                            <div class="col-sm-9">
                                <a id="meeting-detail" class="btn btn-success mt-2 text-white" href=""
                                   target="_blank">View Details</a>

                            </div>
                        </div>

                    </div>
                </div>
            </div>
            <div class="modal-footer">

                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>

            </div>
        </div>
    </div>
</div>
<div class="row wrapper border-bottom white-bg page-heading  ">
    <div class="col-lg-8">
        <h2>Calendar</h2>
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "Meeting")">Activity</a>
            </li>

            <li class="active breadcrumb-item">
                <strong>Calendar</strong>
            </li>
        </ol>
        <div class="col-md-6 p-0 mt-3 mb-0">
            <div class="form-group mb-0 d-flex align-items-center">
                <h4 class="mr-2 mb-2" style="width:130px;">Venue Filter:</h4>

                <select id="placeOption" class="form-control" onchange="selectPlace(this)">
                    <option value="null" disabled selected>Select a Venue</option>
                    <option value="">Select All Venue</option>
                    @foreach (var place in ViewBag.activePlace)
                    {

                        <option value="@place.place_code">@place.factory-@place.name</option>
                    }
                </select>

            </div>

        </div>

    </div>
    <div class="col-md-12 mt-3">
        <input id="place-tags" class="tagsinput " type="text" />
        <button class="btn-danger btn border-0 btn-sm" type="button" onclick="removeSelectPlace()">Clear Filter</button>
    </div>
</div>

@if (ViewBag.ErrorMessage == null)
{
    <div class="wrapper wrapper-content animated fadeInRight ecommerce  ">

        <div class="row">
            <div class="col-lg-12 ">
                <div class="tabs-container" id="report">
                    <ul class="nav nav-tabs  ">

                        <li><a class=" nav-link active " id="calendarTab" data-toggle="tab" href="#tab-calendar">Organized Activity Calendar </a></li>
                        <li><a class=" nav-link  " id="recordTab" data-toggle="tab" href="#tab-placeRecord">Organized Venue Record </a></li>



                    </ul>
                    <div class="tab-content">
                        <div id="tab-calendar" class="tab-pane active">
                            <div class="text-left print-logo pl-2 " style="display:none;">


                                <h2>
                                    <img src="/Content/logo.png" alt="Your Logo" style="width:70px;">
                                    <span class="pl-2" style="font-size:16px;">Calendar for AttendNow</span>
                                </h2>
                                <hr />
                            </div>
                            <div class="row animated fadeInDown " id="animation">

                                <div class="col-lg-12" id="calendar-show">
                                    <div class="ibox ">
                                        <div class="ibox-title no-border" id="ibox-title-pdf">
                                            <h5>Organized Activity Calendar </h5>
                                            <br />
                                            <h3 class="dataDate m-0 text-black"><b>(Activity Date: @ViewBag.dataDate)</b></h3>
                                            <div class="mt-3">
                                                <div class="radio">
                                                    <label class="mr-3">
                                                        <input id="meeting-radio" type="radio" name="statusFilter" value="A"
                                                               onclick="filterCalendar('Y')"
                                                               checked> Activity
                                                    </label>

                                                    <label class="mr-3">
                                                        <input id="place-radio" type="radio" name="statusFilter" value="P"
                                                               onclick="filterCalendar('Y')">
                                                        Venue
                                                    </label>


                                                </div>
                                            </div>
                                            <a class="btn-sm btn btn-danger mt-2 text-white " id="pdfBtn" onclick="exportPDF()">Export as PDF</a>

                                            <div class="ibox-tools ">
                                                <a class="collapse-link">
                                                    <i class="fa fa-chevron-up"></i>
                                                </a>



                                            </div>
                                        </div>
                                        <div class="ibox-content">
                                            <div id="calendar"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="tab-placeRecord" class="tab-pane ">
                            <div class="text-left print-logo " style="display:none;">


                                <h2>
                                    <img src="/Content/logo.png" alt="Your Logo" class="pb-3 " style="width:100px;">
                                    <span class="pl-3">Organized Venue Record</span>
                                </h2>
                                <hr />
                            </div>
                            <div class="row animated fadeInDown">

                                <div class="col-lg-12" id="calendar-show">
                                    <div class="ibox  ">
                                        <div class="ibox-title  ">
                                            <h5>
                                                Organized Venue Record

                                            </h5>
                                            <br />
                                            <h3 class="dataDate m-0 text-black"><b>(Activity Date: @ViewBag.dataDate)</b></h3>

                                        </div>

                                        <div class="ibox-content">

                                            <div class="table-responsive">
                                                <div id="DataTables_Table_3_wrapper" class="dataTables_wrapper dt-bootstrap4">
                                                    <table class="table table-striped table-bordered table-hover dataTables-example dataTable placeRecord totalDesc " id="DataTables_Table_3" aria-describedby="DataTables_Table_3_info" role="grid">
                                                        <thead>
                                                            <tr>
                                                                <th data-column-name="startDate"> Start Date </th>
                                                                <th data-column-name="endDate"> End Date </th>
                                                                <th data-column-name="place">Place </th>

                                                                <th data-column-name="title"> Activity Title </th>
                                                                <th data-column-name="organizer"> Organizer of Activity </th>
                                                                <th data-column-name="createBy"> Created By </th>
                                                                <th data-column-name="createDate"> Created Date </th>


                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @foreach (var item in Model)
                                                            {
                                                                <tr>

                                                                    <td>
                                                                        <span class="startDate">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", item.startDate)</span>

                                                                    </td>

                                                                    <td>
                                                                        <span class="endDate">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", item.endDate)</span>
                                                                    </td>
                                                                    <td>
                                                                        @item.placeName
                                                                    </td>



                                                                    <td>
                                                                        @item.title
                                                                    </td>
                                                                    <td>
                                                                        @item.organizer
                                                                    </td>
                                                                    <td>
                                                                        @item.CreateByName (@item.createBy.ToUpper())
                                                                    </td>
                                                                    <td>
                                                                        <span class="createDate">@string.Format("{0:dd/MM/yyyy hh:mm:ss tt}", item.createDate)</span>
                                                                    </td>

                                                                </tr>
                                                            }
                                                        </tbody>

                                                    </table>

                                                </div>
                                            </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>







                    </div>

                </div>
            </div>
        </div>

    </div> }
else
{

    @Html.Partial("~/Views/Home/_Error.cshtml")}
@section Styles {
    @Styles.Render("~/plugins/fullCalendarStyles")
    @Styles.Render("~/Content/plugins/iCheck/iCheckStyles")
    @Styles.Render("~/plugins/tagInputsStyles")
    @Styles.Render("~/Content/plugins/dataTables/dataTablesStyles")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/plugins/fullCalendar")
    @Scripts.Render("~/plugins/iCheck")
    @Scripts.Render("~/plugins/tagInputs")
    @Scripts.Render("~/plugins/dataTables")
}

@if (ViewBag.ErrorMessage == null)
{
    <script src="/Scripts/plugins/html2pdf/html2pdf.bundle.min.js"></script>
    <script type="text/javascript">

        var globalDataCalendar;
    let exportStatus = true;
    let checked = '';
    function exportPDF() {


        $('html, body').animate({
            scrollTop: $('#place-tags').offset().top
        }, 500, function () {

            if (exportStatus == true) {
                if ($('input[name="statusFilter"]:checked').val() == 'A') {
                    checked = 'A';


                } else {
                    checked = 'P';


                }
                const element = document.getElementById("tab-calendar");
                $('#animation').removeClass('animated fadeInDown');
                $('.print-logo').show();
                $('#pdfBtn').hide();
                $('.ibox-tools').hide();
                $('#ibox-title-pdf').addClass('border-0');
                $('#ibox-title-pdf').addClass('pt-0');
                $('#calendar').addClass('pb-5');
                var pdfPromise = html2pdf(element, {

                    filename: 'calendar.pdf',
                    image: { type: 'jpeg', quality: 1 },
                    html2canvas: { scale: 2 },
                    jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
                });

                // After the conversion is complete
                pdfPromise.then(function () {
                    $('#animation').addClass('animated fadeInDown');
                    $('.print-logo').hide();
                    $('#pdfBtn').show();
                    $('.ibox-tools').show();
                    $('#ibox-title-pdf').removeClass('border-0');
                    $('#ibox-title-pdf').removeClass('pt-0');
                    $('#calendar').removeClass('pb-5');
                    if (checked === 'A') {
                        $('#meeting-radio').prop('checked', true);
                    } else {
                        $('#place-radio').prop('checked', true);
                    }
                    exportStatus = true;

                });
            }
            exportStatus = false;
        });




    }

        function cancelUpdate() {
            console.log(globalDataCalendar);
            $('#calendar').fullCalendar('removeEvents');
            $('#calendar').fullCalendar('addEventSource', globalDataCalendar);
            $('#calendar').fullCalendar('rerenderEvents');
        }
        function updateDate(meeting_code, getStartDate, getEndDate, type, sendEmail) {

    $.ajax({
        url: '/Meeting/UpdateDate', // Update with your actual controller and action method

        type: 'POST',
        data: {
            newStartDate: getStartDate, newEndDate: getEndDate, meeting_code: meeting_code, selectedMonth: selectedMonth, sendEmail: sendEmail
        }

        ,
        success: function (data) {

            if (data.success) {
                $('#updateMeeting').modal('hide');

                if (type !='P') {

                    convertedDataCalendar=JSON.parse(data.meetingsList).map((item, index)=> ({
                            //FOR Meeting Calendar, every meeting has their own color
                            meeting_code: item.meeting_code,
                            title: item.title,
                            start: new Date(convertTimeZoneCalendar(new Date(item.start), '@Session["timezone"].ToString()')),
                            end: new Date(convertTimeZoneCalendar(new Date(item.end), '@Session["timezone"].ToString()')),
                            place: item.body==null ? 'None' : item.body,
                            color: getRandomColor(index, JSON.parse(data.meetingsList).length)
                        })); //convert date to javascript date type
            }

            else {

                //For Place Calendar, if the color is green means it is in your control, if is grey means it is other control
                convertedDataCalendar=JSON.parse(data.placeList).map((item, index)=> {
                        // Find the corresponding item in compareData based on body property
                        const compareItem=JSON.parse(data.meetingsList).find(compareItem=> compareItem.body===item.body);

                        // Conditionally set color based on the comparison
                        const color=compareItem && compareItem.body===item.body ? '#18a689' : '#5a6268';
                        const meeting_code=compareItem && compareItem.body===item.body ? item.meeting_code : 'null';

                        return {
                            meeting_code: meeting_code,
                            title: item.title,
                            start: new Date(convertTimeZoneCalendar(new Date(item.start), '@Session["timezone"].ToString()')),
                            end: new Date(convertTimeZoneCalendar(new Date(item.end), '@Session["timezone"].ToString()')),
                            place: item.body==null ? 'None' : item.body,
                            color: color
                        }

                        ;
                    });
            }

            //refresh data in calendar
            $('#calendar').fullCalendar('removeEvents');
            $('#calendar').fullCalendar('addEventSource', convertedDataCalendar);
            $('#calendar').fullCalendar('rerenderEvents');
            console.log("this: " +convertedDataCalendar);

            successMessage(data.message);
                if (sendEmail == "Y") {
                    returnMessage = data.message;
                }
               
        }

            else {
                cancelUpdate();
                $('#updateMeeting').modal('hide');
            @*$('#calendar').fullCalendar('removeEvents');
            $('#calendar').fullCalendar('addEventSource', convertedDataCalendar);
            $('#calendar').fullCalendar('rerenderEvents');*@
                errorMessage(data.error_message);
               
                returnMessage = data.error_message;
        }
    }

    ,
    error: function () {

        errorMessage(data.error_message);


    }
});
}
        function getCalendar(dataCalendar, type,compareData) {

            var convertedDataCalendar;
            /* initialize the calendar
        -----------------------------------------------------------------*/
            if (type != 'P') {

                convertedDataCalendar = dataCalendar.map((item, index) => ({ //FOR Meeting Calendar, every meeting has their own color
                    meeting_code: item.meeting_code,
                    title: item.title,
                    start: new Date(convertTimeZoneCalendar(new Date(item.start),'@Session["timezone"].ToString()')),
                    end: new Date(convertTimeZoneCalendar(new Date(item.end),'@Session["timezone"].ToString()')),
                    place: item.body == null ? 'None' : item.body,
                    color: getRandomColor(index, dataCalendar.length)
                })); //convert date to javascript date type
                console.log(convertedDataCalendar);
            } else {

                 //For Place Calendar, if the color is green means it is in your control, if is grey means it is other control
                convertedDataCalendar = dataCalendar.map((item, index) => {
                    // Find the corresponding item in compareData based on body property
                    const compareItem = compareData.find(compareItem => compareItem.body === item.body);

                    // Conditionally set color based on the comparison
                    const color = compareItem && compareItem.body === item.body ? '#18a689' : '#5a6268';
                    const meeting_code = compareItem && compareItem.body === item.body ? item.meeting_code : 'null';
                    return {
                        meeting_code: meeting_code,
                        title: item.title,
                        start: new Date(convertTimeZoneCalendar(new Date(item.start),'@Session["timezone"].ToString()')),
                        end: new Date(convertTimeZoneCalendar(new Date(item.end),'@Session["timezone"].ToString()')),
                        place: item.body == null ? 'None' : item.body,
                        color: color
                    };
                });
            }
            globalDataCalendar = convertedDataCalendar; //get current data calendar
            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },

                events: convertedDataCalendar, //put array data here
                eventRender: function (event, element) {
                    // Remove the time display in the event
                    element.find('.fc-time').html('');
                },
                eventMouseover: function (event, jsEvent, view) {
                    // Set the font-weight to bold when hovered
                    $(this).css('font-weight', 'bold');
                    $(this).css('color', 'white');
                },
                eventMouseout: function (event, jsEvent, view) {
                    // Reset the font-weight when the mouse moves out
                    $(this).css('font-weight', '');
                },
                viewRender: function (view, element) {
                    selectedMonth = view.intervalStart.format('YYYY-MM-DD');
                    $('.fc-prev-button,.fc-next-button').on('click', function () { //When select other month, get the selectmonth data
                        selectedMonth = view.intervalStart.format('YYYY-MM-DD');
                        filterMonth = view.intervalStart.format('M');
                        $('.dataDate').html('<b>(Activity Date: Month: ' + filterMonth + ')</b>');
                        filterCalendar('Y');
                    });
                },
                eventClick: function (event) { //action that when you click the calendar box

                    // Show date without time
                    $('#startDate').text(new Date(event.start).toLocaleString('en-US', {
                        hour12: true,
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric',
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit'
                    }).replace(/(\d+)\/(\d+)\/(\d+),/, '$2/$1/$3'));

                    $('#endDate').text(new Date(event.end).toLocaleString('en-US', {
                        hour12: true,
                        hour: 'numeric',
                        minute: 'numeric',
                        second: 'numeric',
                        year: 'numeric',
                        month: '2-digit',
                        day: '2-digit'
                    }).replace(/(\d+)\/(\d+)\/(\d+),/, '$2/$1/$3'));


                    if ($('input[name="statusFilter"]:checked').val() == 'A') {
                        $('#meeting_code').text(event.meeting_code);
                        $('#title').text(event.title);
                        $('#place').text(event.place);
                        $('#meeting-detail').attr('href', '/Meeting/MainForm/' + event.meeting_code);

                    } else {
                        $('#meeting_code').text(event.meeting_code);
                        $('#title').text(event.place);
                        $('#place').text(event.title);
                        if (event.meeting_code == "null") {
                            $('#modal-detail').hide();
                            $('#modal-meeting-code').hide();
                            $('#modal-title').hide();
                        } else {
                            $('#modal-detail').show();
                            $('#modal-meeting-code').show();
                            $('#modal-title').show();
                            $('#meeting-detail').attr('href', '/Meeting/MainForm/' + event.meeting_code);
                        }
                    }
                    $('#calendar-model').modal('show');
                    // Add your edit logic here
                },
                editable: true,
                eventDrop: function (event) { //action that when you move the calendar box

                    if (event.end == null) {

                        event.end = event.start;
                  /*  //*/}
                    var getStartDate = '';
                    var getEndDate = '';
                    if ('@Session["timezone"].ToString()' == "V") { //CONVERT TIME FROM VIETNAM

                        // Parse the datetime string assuming it's in Vietnam timezone
                        const vietnamStartDateTime = moment.tz(moment(event.start).format("YYYY-MM-DD[T]HH:mm"), "Asia/Ho_Chi_Minh");
                        const utcStartTime = moment.utc(vietnamStartDateTime); // Explicitly convert to UTC
                        // Convert to Server timezone
                        const serverStartDateTime = utcStartTime.clone().utcOffset('+08:00');
                        // Parse the datetime string assuming it's in Vietnam timezone


                        const vietnamEndDateTime = moment.tz(moment(event.end).format("YYYY-MM-DD[T]HH:mm"), "Asia/Ho_Chi_Minh");
                        const utcEndTime = moment.utc(vietnamEndDateTime); // Explicitly convert to UTC
                        // Convert to Server timezone
                        const serverEndDateTime = utcEndTime.clone().utcOffset('+08:00');


                        getStartDate = serverStartDateTime.format("YYYY-MM-DD HH:mm:ss");
                        getEndDate = serverEndDateTime.format("YYYY-MM-DD HH:mm:ss");

                    } else if ('@Session["timezone"].ToString()' == "J") { // CONVERT TIME FROM JORDAN

                        const jordanStartDateTime = moment.tz(moment(event.start).format("YYYY-MM-DD[T]HH:mm"), 'Europe/Moscow'); //Use this timezone because cannot find jordan timezone format

                        // Convert to UTC
                        const utcStartTime = jordanStartDateTime.clone().utc();

                        // Convert to Server timezone with the correct offset (+5 hours)
                        const serverStartTime = utcStartTime.clone().utcOffset('+08:00');

                        const jordanEndDateTime = moment.tz(moment(event.end).format("YYYY-MM-DD[T]HH:mm"), 'Europe/Moscow');

                        // Convert to UTC
                        const utcEndTime = jordanEndDateTime.clone().utc();

                        // Convert to Server timezone with the correct offset (+5 hours)
                        const serverEndTime = utcEndTime.clone().utcOffset('+08:00');

                        getStartDate = serverStartTime.format("YYYY-MM-DD HH:mm:ss");
                        getEndDate = serverEndTime.format("YYYY-MM-DD HH:mm:ss");





                    } else if ('@Session["timezone"].ToString()' == "M") { //convert time from malaysia
                        const jordanStartDateTime = moment.tz(moment(event.start).format("YYYY-MM-DD[T]HH:mm"), 'Asia/Kuala_Lumpur'); //Use this timezone because cannot find jordan timezone format
                        console.log(jordanStartDateTime);
                        // Convert to UTC
                        const utcStartTime = jordanStartDateTime.clone().utc();

                        // Convert to Server timezone with the correct offset (+5 hours)
                        const serverStartTime = utcStartTime.clone().utcOffset('+08:00');

                        const jordanEndDateTime = moment.tz(moment(event.end).format("YYYY-MM-DD[T]HH:mm"), 'Asia/Kuala_Lumpur');

                        // Convert to UTC
                        const utcEndTime = jordanEndDateTime.clone().utc();

                        // Convert to Server timezone with the correct offset (+5 hours)
                        const serverEndTime = utcEndTime.clone().utcOffset('+08:00');

                        getStartDate = serverStartTime.format("YYYY-MM-DD HH:mm:ss");
                        getEndDate = serverEndTime.format("YYYY-MM-DD HH:mm:ss");
                    }
                    const onclickValue = `updateDate('${event.meeting_code}','${getStartDate}','${getEndDate}','${type}','Y')`;

                    $("#confirmBtn").attr("onclick", onclickValue);
                    const onclickNoEmailValue = `updateDate('${event.meeting_code}','${getStartDate}','${getEndDate}','${type}')`;
                    const onclickCancel = `cancelUpdate()`;


                    $("#confirmBtnNotEmail").attr("onclick", onclickNoEmailValue);
                    $(".btnCancel").attr("onclick", onclickCancel);
                    $('#updateMeeting').modal('show');

                    console.log(convertedDataCalendar);
                    //revertFunc();


                },

            });
        }

        function removeSelectPlace() {
            selectedPlace = []; //set the array to ''
            $('#place-tags').tagsinput('removeAll'); //remove all the tag in place-tag
            $('#place-tags').tagsinput('add', { value: "Select All" }); //because default is select all function
            filterCalendar(); //filter or refresh calendar

        }
        function selectPlace(thisData) {
            var selectAllIndex = $('.tagsinput').tagsinput('items').findIndex(function (tag) {
                return tag.value === 'Select All';
            });

            // Remove the tag with the value "Select All"
            if (selectAllIndex !== -1) {
                selectedPlace = [];
                $('.tagsinput').tagsinput('removeAll');
            }

            if (thisData.value !== '' && thisData.value !== null) {
                $('#place-tags').tagsinput('add', { value: $(thisData).find(':selected').text() + " (" + thisData.value.toUpperCase() + ")" });

            } else {
                selectedPlace = [];
                $('#place-tags').tagsinput('removeAll');
                $('#place-tags').tagsinput('add', { value: "Select All" });
            }
            selectedPlace.push(thisData.value);

            filterCalendar();
        }

        function filterCalendar(calendarType) {
            $('#placeOption').val('null');

            $.ajax({
                url: '/Home/FilterCalendar', // Update with your actual controller and action method
                type: 'POST',
                data: { selectedPlace: selectedPlace, selectedMonth: selectedMonth },
                success: function (data) {
                    if (data.success) {
                        if (data.placeRecordData) {
                            $('.placeRecord').DataTable().destroy();
                            reinitializeDataTable(data.placeRecordData, '.placeRecord', "Organized Activity Records", "Organized Activity Record");
                        }

                        if ($('#calendarTab').hasClass('active') == false) {
                            $('#tab-calendar').addClass("active");
                        }
                            if ($('input[name="statusFilter"]:checked').val() == 'A') {

                                convertedDataCalendar = JSON.parse(data.meetingsList).map((item, index) => ({
                                    meeting_code: item.meeting_code,
                                    title: item.title,
                                    start: new Date(convertTimeZoneCalendar(new Date(item.start),'@Session["timezone"].ToString()')),
                                    end: new Date(convertTimeZoneCalendar(new Date(item.end),'@Session["timezone"].ToString()')),
                                    place: item.body == null ? 'None' : item.body,
                                    color: getRandomColor(index, JSON.parse(data.meetingsList).length)
                                })); //convert date to javascript date type

                                $('#calendar').fullCalendar('option', 'editable', true);
                                $('#modal-title').show();
                                $('#modal-meeting-code').show();
                                $('#modal-detail').show();


                            } else {
                               @*
                                $('#modal-detail').hide();*@
                                convertedDataCalendar = JSON.parse(data.placeList).map((item, index) => {
                                    // Find the corresponding item in compareData based on body property
                                    const compareItem = JSON.parse(data.meetingsList).find(compareItem => compareItem.title === item.title);

                                    // Conditionally set color based on the comparison
                                    const color = compareItem && compareItem.title === item.title ? '#18a689' : '#5a6268';
                                    const meeting_code = compareItem && compareItem.body === item.body ? item.meeting_code : 'null';
                                    return {
                                        meeting_code: meeting_code,
                                        title: item.body,
                                        start: new Date(convertTimeZoneCalendar(new Date(item.start),'@Session["timezone"].ToString()')),
                                        end: new Date(convertTimeZoneCalendar(new Date(item.end),'@Session["timezone"].ToString()')),
                                        place: item.title == null ? 'None' : item.title,
                                        color: color
                                    };
                                });
                                $('#calendar').fullCalendar('option', 'editable', false);

                            }
                            globalDataCalendar = convertedDataCalendar; //get current data calendar
                            //refresh data in calendar
                            $('#calendar').fullCalendar('removeEvents');
                            $('#calendar').fullCalendar('addEventSource', convertedDataCalendar);
                            $('#calendar').fullCalendar('rerenderEvents');
                            console.log(convertedDataCalendar);
                        if ($('#calendarTab').hasClass('active') == false) {
                            $('#tab-calendar').removeClass("active");
                        }

                        if (calendarType != 'Y') {
                            successMessage(data.message);
                        }

                    } else {

                        errorMessage(data.error_message);


                    }
                },
                error: function () {

                    errorMessage(data.error_message);


                }
            });
        }


        $(document).ready(function () {

            selectedPlace = [];
            selectedMonth = '';
            convertTableTimeZone('@Session["timezone"].ToString()');
            initializeDataTable('Venue Organized Records', '.placeRecord', 'Venue Organized Record');

            //set the design of taginput
            $('.tagsinput').tagsinput({
                tagClass: 'label label-primary',
                itemValue: 'value'
            });

            $('#place-tags').tagsinput('add', { value: "Select All" }); //because default is select all function

            getCalendar(@Html.Raw(ViewBag.organizedMeeting), 'A'); //A means activity calendar


            //when you delete a tag then will...
            $('#place-tags').on('beforeItemRemove', function (event) {
                console.log(event.item.value);
                if (event.item.value != "Select All") {

                    var value = (event.item.value).match(/\(([^)]+)\)/)[1];
                    if (selectPlace.length === 1) {
                        $('#place-tags').tagsinput('add', { value: "Select All" }); //because default is select all function
                    }
                    var indexToRemove = selectedPlace.indexOf(value);

                    // Remove the value from the selectedPlace array
                    if (indexToRemove !== -1) {
                        selectedPlace.splice(indexToRemove, 1);
                    }

                } else {
                    if (event.item === $('#place-tags').tagsinput('items')[0]) {
                        // If it's the first item, prevent removal
                        event.cancel = true;
                        return;
                    }
                }


                filterCalendar();

            });
        });
    </script>
}
